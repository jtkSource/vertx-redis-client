openapi: "3.0.0"
info:
  version: 1.0.0
  title: Corda API
servers:
  - url: http://localhost:9096
paths:
  # Bonds API
  /api/terms/issue:
    post:
      summary: Create Bond Term
      operationId: issue-bond-terms
      tags:
        - corda
        - bond-term
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/termRequest'
      responses:
        '200':
          description: Response for create Term
        '500':
          description: The request has been accepted for processing, but the processing has not been completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exceptionMessage'
  /api/terms/{bondName}:
    get:
      summary: Get bonds with bondName
      operationId: get-bond-terms
      tags:
        - corda
        - bond-term
      parameters:
        - name: bondName
          in: path
          required: true
          description: BondId to retrieve from bonds
          schema:
            type: string
      responses:
        '200':
          description: BondTerms queried for
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/term'
        '500':
          description: The request has been accepted for processing, but the processing has not been completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exceptionMessage'
  /api/bonds/assign:
    post:
      summary: Assign bonds to Traders
      operationId: request-bond
      tags:
        - corda
        - bond
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                bondName:
                  type: string
                unitsAssigned:
                  type: integer
      responses:
        '200':
          description: Response assigning bonds to traders
        '500':
          description: The request has been accepted for processing, but the processing has not been completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exceptionMessage'
  /api/bonds/assigned/{userId}:
    get:
      summary: Get bonds assigned to UserId
      operationId: get-bonds-on-user
      tags:
        - corda
        - bond-term
      parameters:
        - name: userId
          in: path
          required: true
          description: userId to retrieve bonds
          schema:
            type: string
      responses:
        '200':
          description: BondTerms queried for userId
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '500':
          description: The request has been accepted for processing, but the processing has not been completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exceptionMessage'

        # Users API
  /api/bonds/details/{bondId}:
    get:
      summary: Get details on the bond
      operationId: get-bond-details
      tags:
        - corda
        - bond-term
      parameters:
        - name: bondId
          in: path
          required: true
          description: bondId
          schema:
            type: string
      responses:
        '200':
          description: Bond Details issued
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/bond-details"
        '500':
          description: The request has been accepted for processing, but the processing has not been completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exceptionMessage'

  # Users API
  /api/users:
    post:
      summary: Create Users on the cache
      operationId: create-users
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userRequest'
      responses:
        '200':
          description: Response for create Term
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
        '500':
          description: The request has been accepted for processing, but the processing has not been completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exceptionMessage'
  /api/user/{userId}:
    get:
      summary: Return the Users
      operationId: get-users
      tags:
        - users
      parameters:
        - name: userId
          in: path
          required: true
          description: UserId to retrieve the user
          schema:
            type: string
      responses:
        '200':
          description: Retrieve the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '500':
          description: The request has been accepted for processing, but the processing has not been completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exceptionMessage'
  /api/user/roles:
    post:
      summary: Assign role to userIs
      operationId: assign-user-role
      tags:
        - users
        - roles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                role:
                  type: string
      responses:
        '200':
          description: Response for assigning roles to users
        '500':
          description: The request has been accepted for processing, but the processing has not been completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exceptionMessage'
  /api/user/roles/{userId}:
    get:
      summary: Get all roles for the user
      operationId: get-user-role
      tags:
        - users
        - roles
      parameters:
        - name: userId
          in: path
          required: true
          description: UserId to retrieve the user
          schema:
            type: string
      responses:
        '200':
          description: Retrieve the list of roles
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '500':
          description: The request has been accepted for processing, but the processing has not been completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exceptionMessage'

  # Misc.
  /api/keys:
    get:
      summary: Get redis keys by pattern
      operationId: get-keys
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                pattern:
                  type: string
      responses:
        '200':
          description: BondTerms queried for userId
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '500':
          description: The request has been accepted for processing, but the processing has not been completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exceptionMessage'

components:
  schemas:
    user:
      type: object
      properties:
        userName:
          type: string
        password:
          type: string
        name:
          type: string
        role:
          type: string
        createdTime:
          type: string
    userRequest:
      type: object
      properties:
        userName:
          type: string
        password:
          type: string
        name:
          type: string
        role:
          type: string
    termRequest:
      type: object
      properties:
        bondName:
          type: string
        interestRate:
          type: number
        parValue:
          type: number
        unitsAvailable:
          type: integer
        maturityDate:
          type: string
        bondType:
          type: string
        currency:
          type: string
        creditRating:
          type: string
        paymentFrequencyInMonths:
          type: integer
    term:
      type: object
      properties:
        bondName:
          type: string
        interestRate:
          type: number
        parValue:
          type: number
        unitsAvailable:
          type: integer
        maturityDate:
          type: string
        bondType:
          type: string
        currency:
          type: string
        creditRating:
          type: string
        paymentFrequencyInMonths:
          type: integer
    bond-details:
      type: object
      properties:
        bondId:
          type: string
        userId:
          type: string
        unitsAssigned:
          type: integer
        nextCouponDate:
          type: string
        maturityDate:
          type: string
    exceptionMessage:
      type: object
      properties:
        msg:
          type: string